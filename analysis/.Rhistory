## poverty from 2020 acs ##
variables_dict <-
tibble::tribble(
~var,          ~shortname,      ~desc,
"B23024_001",  'poverty_denominator', "20-64 year old total population for poverty estimates",
"B23024_002",  'poverty_count',    "20-64 year old estimate of income below poverty level",
)
acs_data <- get_acs(
geography = "congressional district",
#geometry = TRUE,
year = 2020,
variables = variables_dict$var)
# pivot to a wide format for renaming, dropping the margin of error data
acs_data <- acs_data %>% select(-moe) %>%
pivot_wider(names_from = variable, values_from = estimate)
rename_vars <- setNames(variables_dict$var, variables_dict$shortname)
acs_data <- acs_data %>% rename(!!rename_vars)
# calculate percent poverty
acs_data <- acs_data %>%
mutate(poverty_pct = 100*poverty_count  / poverty_denominator) %>%
select(geoid=GEOID,poverty_count,poverty_denominator,poverty_pct)
## pull age distribution by CD from ACS ##
# specify variables
age_variables <- paste0("B01001_0", stringr::str_pad(1:49, 2, side='left', pad=0))
# pull population data
popsizes <- tidycensus::get_acs(
geography = "congressional district",
year = 2020,
state = state.abb,
variables = age_variables
)
# separate out total population estimate
total_population <- popsizes %>% filter(variable == 'B01001_001')
total_population %<>% rename(total_population = estimate)
total_population %<>% select(-c(variable, moe))
# clean variables
variables <- tidycensus::load_variables(
year = 2020,
dataset = 'acs5')
# get specific variable definitions
variables %<>% filter(name %in% age_variables)
# parse estimate labels
variables %<>% tidyr::separate(label, into = c('estimate_label', 'total_label', 'sex_gender', 'age_group'), sep = '!!')
variables %<>% select(-estimate_label, -total_label, -concept)
variables$sex_gender %<>% stringr::str_remove_all(":")
# join in the variable labels
popsizes %<>% left_join(variables, by = c('variable' = 'name'))
# aggregate sex/gender
popsizes %<>% group_by(GEOID, NAME, age_group) %>%
summarize(
estimate = sum(estimate),
moe = tidycensus::moe_sum(estimate, moe))
# assign 10-year age bands
popsizes %<>% mutate(
age_group = case_when(
age_group == 'Under 5 years' ~ '0-24',
age_group %in% c('5 to 9 years', '10 to 14 years') ~ '0-24',
age_group %in% c('15 to 17 years', '18 and 19 years', '20 years', '21 years', '22 to 24 years') ~ '0-24',
age_group %in% c('25 to 29 years', '30 to 34 years') ~ '25-44',
age_group %in% c('35 to 39 years', '40 to 44 years') ~ '25-44',
age_group %in% c('45 to 49 years', '50 to 54 years') ~ '45-64',
age_group %in% c('55 to 59 years', '60 and 61 years', '62 to 64 years') ~ '45-64',
age_group %in% c('65 and 66 years', '67 to 69 years', '70 to 74 years') ~ '65-74',
age_group %in% c('75 to 79 years', '80 to 84 years') ~ '75+',
age_group == '85 years and over' ~ '75+'
))
# sum up age groups within 10-year age bands
popsizes %<>% group_by(GEOID, age_group) %>%
summarize(estimate = sum(estimate))
# make the age groups a factor with ordered levels
popsizes$age_group %<>% factor(levels = c('0-24', '25-44', '45-64', '65-74', '75+'))
## remove NAs (these are total population*2)
popsizes<-subset(popsizes,!is.na(age_group))
## put in wide format by age group
popsizes<-popsizes%>%
pivot_wider(names_from = age_group, values_from = estimate)%>%
rename(geoid=GEOID,age0_24=`0-24`,age25_44=`25-44`,age45_64=`45-64`,age65_74=`65-74`,age75plus=`75+`)
## merge popsize and poverty data
acs_cd<-merge(acs_data,popsizes,by='geoid')
## data pulled from 2020 census redistricting files ##
variables_dict <-
tibble::tribble(
~var,          ~shortname,      ~desc,
"P1_001N",     'pop_total',                      'total population estimates (race composition table)',
"P1_003N",     'race_white_alone',               "white alone population estimate",
"P1_004N",     'race_black_alone',               "black alone population estimate",
"P1_005N",     'race_am_indian_ak_native_alone', "american indian alone population estimate",
"P1_006N",     'race_asian_alone',               "asian alone population estimate",
"P1_007N",     'race_native_hawaiian_opi_alone', "native hawaiian or other pacific islander alone",
"P2_001N",     'hispanic_denom',                 "denominator population for hispanic estimate",
"P2_002N",     'hispanic_count',                 "population estimate for hispanic",
)
## most counties are atoms, so pull the county-level dataset for the whole US ##
dc2020_cd<- get_decennial(geography = "congressional district",
variables = variables_dict$var,year = 2020,sumfile = "pl")
# pivot to a wide format for renaming
dc2020_cd <- dc2020_cd %>%
pivot_wider(names_from = variable, values_from = value)
rename_vars <- setNames(variables_dict$var, variables_dict$shortname)
dc2020_cd <- dc2020_cd %>% rename(!!rename_vars)
# calculate the ICE for racialized economic segregation
dc2020_cd <- dc2020_cd %>%
mutate(
pct_white = 100*race_white_alone / pop_total,
pct_black = 100*race_black_alone / pop_total,
pct_aian = 100*race_am_indian_ak_native_alone / pop_total,
pct_asian = 100*race_asian_alone / pop_total,
pct_hispanic = 100*hispanic_count / hispanic_denom) %>%
select(geoid=GEOID,pop_total,pct_white,pct_black,pct_aian,pct_asian,pct_hispanic)
dc2020_cd<-data.frame(dc2020_cd)
## merge acs and residtricting data ##
cd<-merge(acs_cd,dc2020_cd,by='geoid',all.x=T)
## compute expected counts ##
## christian's function for getting pop standards ##
source('/Users/rachel/OneDrive - Harvard University/Grant_Apps/Other_PI/krieger_feb23/working_paper/pull_pop_std_rates.R')
std<-load_std_population_sizes()
## now use these to get age-standardized denominators ##
cd<-cd%>%mutate(
expected_deaths=age0_24*std$rate[1]+age25_44*std$rate[2]+age45_64*std$rate[3]+age65_74*std$rate[4]+age75plus*std$rate[5]
)
## now read in CD level file from christian and keep only the covid outcomes dw nominate and geoids ##
lancet<-readRDS('/Users/rachel/OneDrive - Harvard University/Grant_Apps/Other_PI/krieger_feb23/power/districts_covid19_icu_and_covariates.rds')
lancet<-lancet[,c('GEOID','ALAND','deaths_crude','nominate_dim1')]
names(lancet)[1]<-'geoid'
st_geometry(lancet)<-NULL
cd<-merge(cd,lancet,by='geoid')
## compute pop density ##
cd$popdensity<-100000*cd$pop_total/cd$ALAND
## center and scale all predictors besides poverty ##
rescaled<-sapply(cd[,c('nominate_dim1','popdensity','pct_black','pct_aian','pct_asian','pct_hispanic')],scale)
rescaled<-data.frame(rescaled)
names(rescaled)<-paste0(c('nominate_dim1','popdensity','pct_black','pct_aian','pct_asian','pct_hispanic'),'_rs')
cd<-cbind(cd,rescaled)
## fit poisson regression to these data ##
fit_cd<-glm(deaths_crude~nominate_dim1_rs+popdensity_rs+
poverty_pct+pct_black_rs+pct_aian_rs+
pct_asian_rs+pct_hispanic_rs+offset(log(expected_deaths)),
data=cd,family = quasipoisson(link = 'log'))
summary(fit_cd)
summary(fit_cd)
confint(fit_cd)
save(fit_cd,cd,file='/Users/rachel/OneDrive - Harvard University/Grant_Apps/Other_PI/krieger_feb23/working_paper/results_cd_level.RData')
rm(list=ls())
library(nimble)
library(ggplot2)
load('/Users/rachel/OneDrive - Harvard University/Grant_Apps/Other_PI/krieger_feb23/working_paper/results_misalignpred.RData')
load('/Users/rachel/OneDrive - Harvard University/Grant_Apps/Other_PI/krieger_feb23/working_paper/results_misalignpred_10-09-2022.RData')
## check traceplots for convergence ##
plot(mcmc.out$samples[ , 'beta_dwnom_y'], type = "l", xlab = "iteration")
plot(mcmc.out$samples[ , 'beta_poverty'], type = "l", xlab = "iteration")
## model summary from nimble ##
varsum<-data.frame(mcmc.out$summary)
varsum_y<-varsum[c(grep('_y',rownames(varsum)),which(rownames(varsum)=='beta_poverty')),]
varsum_y<-varsum_y[-which(rownames(varsum_y)=='intercept_y'),]
varsum_y$coef_name<-rownames(varsum_y)
abrm<-varsum_y[,c('Mean','X95.CI_low','X95.CI_upp','coef_name')]
abrm$model<-'ABRM'
names(abrm)<-c('est','lo','hi','coef_name','model')
## read in and format CD-level analysis results ##
load('/Users/rachel/OneDrive - Harvard University/Grant_Apps/Other_PI/krieger_feb23/working_paper/results_cd_level.RData')
cd_model<-data.frame('est'=coef(fit_cd)[-1],confint(fit_cd)[-1,],
'coef_name'=paste0('beta_',c('dwnom_y','popdensity_y','poverty','black_y','aian_y','asian_y','hispanic_y')),
'model'='CD')
names(cd_model)<-c('est','lo','hi','coef_name','model')
## read in and format county-level analysis results ##
load('/Users/rachel/OneDrive - Harvard University/Grant_Apps/Other_PI/krieger_feb23/working_paper/results_county_level.RData')
county_model<-data.frame('est'=coef(county_fit)[-1],confint(county_fit)[-1,],
'coef_name'=paste0('beta_',c('poverty','dwnom_y','popdensity_y','black_y','aian_y','asian_y','hispanic_y')),
'model'='county')
names(county_model)<-c('est','lo','hi','coef_name','model')
## dataframe for results from all models (for ggplot) ##
gg<-rbind(abrm,cd_model,county_model)
## merge in nice names for plot ##
mm<-data.frame('coef_name'=paste0('beta_',c('poverty','popdensity_y','hispanic_y','dwnom_y',
'black_y','asian_y','aian_y')),
'nice_name'=factor(c('Poverty**','Pop Density','%Hispanic','DW-Nominate','%Black','%Asian','%AIAN'),
levels = rev(c('DW-Nominate','Poverty**','Pop Density',
'%Black','%Hispanic','%Asian','%AIAN'))))
hh<-merge(gg,mm,by='coef_name')
ggplot(hh, aes(x=exp(est), y=nice_name)) +
geom_errorbar(aes(xmin=exp(lo), xmax=exp(hi), color=model), position = position_dodge(0.4), width=.3) +
geom_point(aes(color = model), position = position_dodge(0.4), size=1.1)+
geom_vline(xintercept = 1)+
xlab('Mortality Rate Ratio')+
scale_color_manual(values=c("#00AFBB", "#E69F00","#CC79A7"))+
theme_bw()+
theme(text=element_text(size=12,colour="black"),axis.title.y = element_blank(),legend.title= element_blank())
rm(list=ls())
library(sf)
library(USAboundaries)
load('/Users/rachel/OneDrive - Harvard University/Grant_Apps/Other_PI/krieger_feb23/working_paper/data_for_loni.RData')
st_geometry(cd)<-NULL
cdshp<-us_congressional()
cdshp<-subset(cdshp,!(state_abbr%in% c('AK','HI','PR')))
cdshp<-st_transform(cdshp, 3857)
county<-st_transform(county, 3857)
## assign each county to the cd that its centroid lies in and use the DW-nominate from that cd ##
county_cents<-st_centroid(county)
county_in_cd <- st_join(county_cents, cdshp, join = st_within)
st_geometry(county_in_cd)<-NULL
county_cd<-county_in_cd[,c('geoid.x','geoid.y')]
names(county_cd)<-c('geoid','cd_id')
## merge in DW nominate ##
county_cd<-merge(county_cd,cd[,c('GEOID','nominate_dim1')],by.x='cd_id',by.y='GEOID')
## merge CD IDs into county shapefile
county<-merge(county,county_cd,by='geoid')
## center and scale all predictors besides poverty ##
temp<-county[,c('nominate_dim1','popdensity','pct_black','pct_aian','pct_asian','pct_hispanic')]
st_geometry(temp)<-NULL
rescaled<-sapply(temp,scale)
rescaled<-data.frame(rescaled)
#names(rescaled)<-paste0(c('nominate_dim1','popdensity','pct_black','pct_aian','pct_asian','pct_hispanic'),'_rs')
#county<-cbind(county,rescaled)
county_fit<-glm(county$covid_deaths~county$poverty_pct+rescaled$nominate_dim1+ rescaled$popdensity+rescaled$pct_black+
rescaled$pct_aian+rescaled$pct_asian+rescaled$pct_hispanic+offset(log(county$expected_deaths)),
family=poisson(link = 'log'))
save(county_fit,county,file='/Users/rachel/OneDrive - Harvard University/Grant_Apps/Other_PI/krieger_feb23/working_paper/results_county_level.RData')
warnings()
county_fit<-glm(round(county$covid_deaths)~county$poverty_pct+rescaled$nominate_dim1+ rescaled$popdensity+rescaled$pct_black+
rescaled$pct_aian+rescaled$pct_asian+rescaled$pct_hispanic+offset(log(county$expected_deaths)),
family=poisson(link = 'log'))
rm(list=ls())
library(sf)
library(USAboundaries)
load('/Users/rachel/OneDrive - Harvard University/Grant_Apps/Other_PI/krieger_feb23/working_paper/data_for_loni.RData')
st_geometry(cd)<-NULL
cdshp<-us_congressional()
cdshp<-subset(cdshp,!(state_abbr%in% c('AK','HI','PR')))
cdshp<-st_transform(cdshp, 3857)
county<-st_transform(county, 3857)
## assign each county to the cd that its centroid lies in and use the DW-nominate from that cd ##
county_cents<-st_centroid(county)
county_in_cd <- st_join(county_cents, cdshp, join = st_within)
st_geometry(county_in_cd)<-NULL
county_cd<-county_in_cd[,c('geoid.x','geoid.y')]
names(county_cd)<-c('geoid','cd_id')
## merge in DW nominate ##
county_cd<-merge(county_cd,cd[,c('GEOID','nominate_dim1')],by.x='cd_id',by.y='GEOID')
## merge CD IDs into county shapefile
county<-merge(county,county_cd,by='geoid')
## center and scale all predictors besides poverty ##
temp<-county[,c('nominate_dim1','popdensity','pct_black','pct_aian','pct_asian','pct_hispanic')]
st_geometry(temp)<-NULL
rescaled<-sapply(temp,scale)
rescaled<-data.frame(rescaled)
#names(rescaled)<-paste0(c('nominate_dim1','popdensity','pct_black','pct_aian','pct_asian','pct_hispanic'),'_rs')
#county<-cbind(county,rescaled)
county_fit<-glm(round(county$covid_deaths)~county$poverty_pct+rescaled$nominate_dim1+ rescaled$popdensity+rescaled$pct_black+
rescaled$pct_aian+rescaled$pct_asian+rescaled$pct_hispanic+offset(log(county$expected_deaths)),
family=poisson(link = 'log'))
save(county_fit,county,file='/Users/rachel/OneDrive - Harvard University/Grant_Apps/Other_PI/krieger_feb23/working_paper/results_county_level.RData')
rm(list=ls())
library(tidycensus)
library(ggplot2)
library(USAboundaries)
library(sf)
library(tibble)
library(tidyr)
library(dplyr)
library(stringr)
library(magrittr)
library(sp)
library(spdep)
## poverty from 2020 acs ##
variables_dict <-
tibble::tribble(
~var,          ~shortname,      ~desc,
"B23024_001",  'poverty_denominator', "20-64 year old total population for poverty estimates",
"B23024_002",  'poverty_count',    "20-64 year old estimate of income below poverty level",
)
acs_data <- get_acs(
geography = "congressional district",
#geometry = TRUE,
year = 2020,
variables = variables_dict$var)
# pivot to a wide format for renaming, dropping the margin of error data
acs_data <- acs_data %>% select(-moe) %>%
pivot_wider(names_from = variable, values_from = estimate)
rename_vars <- setNames(variables_dict$var, variables_dict$shortname)
acs_data <- acs_data %>% rename(!!rename_vars)
# calculate percent poverty
acs_data <- acs_data %>%
mutate(poverty_pct = 100*poverty_count  / poverty_denominator) %>%
select(geoid=GEOID,poverty_count,poverty_denominator,poverty_pct)
## pull age distribution by CD from ACS ##
# specify variables
age_variables <- paste0("B01001_0", stringr::str_pad(1:49, 2, side='left', pad=0))
# pull population data
popsizes <- tidycensus::get_acs(
geography = "congressional district",
year = 2020,
state = state.abb,
variables = age_variables
)
# separate out total population estimate
total_population <- popsizes %>% filter(variable == 'B01001_001')
total_population %<>% rename(total_population = estimate)
total_population %<>% select(-c(variable, moe))
# clean variables
variables <- tidycensus::load_variables(
year = 2020,
dataset = 'acs5')
# get specific variable definitions
variables %<>% filter(name %in% age_variables)
# parse estimate labels
variables %<>% tidyr::separate(label, into = c('estimate_label', 'total_label', 'sex_gender', 'age_group'), sep = '!!')
variables %<>% select(-estimate_label, -total_label, -concept)
variables$sex_gender %<>% stringr::str_remove_all(":")
# join in the variable labels
popsizes %<>% left_join(variables, by = c('variable' = 'name'))
# aggregate sex/gender
popsizes %<>% group_by(GEOID, NAME, age_group) %>%
summarize(
estimate = sum(estimate),
moe = tidycensus::moe_sum(estimate, moe))
# assign 10-year age bands
popsizes %<>% mutate(
age_group = case_when(
age_group == 'Under 5 years' ~ '0-24',
age_group %in% c('5 to 9 years', '10 to 14 years') ~ '0-24',
age_group %in% c('15 to 17 years', '18 and 19 years', '20 years', '21 years', '22 to 24 years') ~ '0-24',
age_group %in% c('25 to 29 years', '30 to 34 years') ~ '25-44',
age_group %in% c('35 to 39 years', '40 to 44 years') ~ '25-44',
age_group %in% c('45 to 49 years', '50 to 54 years') ~ '45-64',
age_group %in% c('55 to 59 years', '60 and 61 years', '62 to 64 years') ~ '45-64',
age_group %in% c('65 and 66 years', '67 to 69 years', '70 to 74 years') ~ '65-74',
age_group %in% c('75 to 79 years', '80 to 84 years') ~ '75+',
age_group == '85 years and over' ~ '75+'
))
# sum up age groups within 10-year age bands
popsizes %<>% group_by(GEOID, age_group) %>%
summarize(estimate = sum(estimate))
# make the age groups a factor with ordered levels
popsizes$age_group %<>% factor(levels = c('0-24', '25-44', '45-64', '65-74', '75+'))
## remove NAs (these are total population*2)
popsizes<-subset(popsizes,!is.na(age_group))
## put in wide format by age group
popsizes<-popsizes%>%
pivot_wider(names_from = age_group, values_from = estimate)%>%
rename(geoid=GEOID,age0_24=`0-24`,age25_44=`25-44`,age45_64=`45-64`,age65_74=`65-74`,age75plus=`75+`)
## merge popsize and poverty data
acs_cd<-merge(acs_data,popsizes,by='geoid')
## data pulled from 2020 census redistricting files ##
variables_dict <-
tibble::tribble(
~var,          ~shortname,      ~desc,
"P1_001N",     'pop_total',                      'total population estimates (race composition table)',
"P1_003N",     'race_white_alone',               "white alone population estimate",
"P1_004N",     'race_black_alone',               "black alone population estimate",
"P1_005N",     'race_am_indian_ak_native_alone', "american indian alone population estimate",
"P1_006N",     'race_asian_alone',               "asian alone population estimate",
"P1_007N",     'race_native_hawaiian_opi_alone', "native hawaiian or other pacific islander alone",
"P2_001N",     'hispanic_denom',                 "denominator population for hispanic estimate",
"P2_002N",     'hispanic_count',                 "population estimate for hispanic",
)
## most counties are atoms, so pull the county-level dataset for the whole US ##
dc2020_cd<- get_decennial(geography = "congressional district",
variables = variables_dict$var,year = 2020,sumfile = "pl")
# pivot to a wide format for renaming
dc2020_cd <- dc2020_cd %>%
pivot_wider(names_from = variable, values_from = value)
rename_vars <- setNames(variables_dict$var, variables_dict$shortname)
dc2020_cd <- dc2020_cd %>% rename(!!rename_vars)
# calculate the ICE for racialized economic segregation
dc2020_cd <- dc2020_cd %>%
mutate(
pct_white = 100*race_white_alone / pop_total,
pct_black = 100*race_black_alone / pop_total,
pct_aian = 100*race_am_indian_ak_native_alone / pop_total,
pct_asian = 100*race_asian_alone / pop_total,
pct_hispanic = 100*hispanic_count / hispanic_denom) %>%
select(geoid=GEOID,pop_total,pct_white,pct_black,pct_aian,pct_asian,pct_hispanic)
dc2020_cd<-data.frame(dc2020_cd)
## merge acs and residtricting data ##
cd<-merge(acs_cd,dc2020_cd,by='geoid',all.x=T)
## compute expected counts ##
## christian's function for getting pop standards ##
source('/Users/rachel/OneDrive - Harvard University/Grant_Apps/Other_PI/krieger_feb23/working_paper/pull_pop_std_rates.R')
std<-load_std_population_sizes()
## now use these to get age-standardized denominators ##
cd<-cd%>%mutate(
expected_deaths=age0_24*std$rate[1]+age25_44*std$rate[2]+age45_64*std$rate[3]+age65_74*std$rate[4]+age75plus*std$rate[5]
)
## now read in CD level file from christian and keep only the covid outcomes dw nominate and geoids ##
lancet<-readRDS('/Users/rachel/OneDrive - Harvard University/Grant_Apps/Other_PI/krieger_feb23/power/districts_covid19_icu_and_covariates.rds')
lancet<-lancet[,c('GEOID','ALAND','deaths_crude','nominate_dim1')]
names(lancet)[1]<-'geoid'
st_geometry(lancet)<-NULL
cd<-merge(cd,lancet,by='geoid')
## compute pop density ##
cd$popdensity<-100000*cd$pop_total/cd$ALAND
## center and scale all predictors besides poverty ##
rescaled<-sapply(cd[,c('nominate_dim1','popdensity','pct_black','pct_aian','pct_asian','pct_hispanic')],scale)
rescaled<-data.frame(rescaled)
names(rescaled)<-paste0(c('nominate_dim1','popdensity','pct_black','pct_aian','pct_asian','pct_hispanic'),'_rs')
cd<-cbind(cd,rescaled)
## fit poisson regression to these data ##
fit_cd<-glm(deaths_crude~nominate_dim1_rs+popdensity_rs+
poverty_pct+pct_black_rs+pct_aian_rs+
pct_asian_rs+pct_hispanic_rs+offset(log(expected_deaths)),
data=cd,family = poisson(link = 'log'))
summary(fit_cd)
confint(fit_cd)
save(fit_cd,cd,file='/Users/rachel/OneDrive - Harvard University/Grant_Apps/Other_PI/krieger_feb23/working_paper/results_cd_level.RData')
rm(list=ls())
## examine results ##
library(nimble)
library(ggplot2)
## read in and format ABRM results ##
load('/Users/rachel/OneDrive - Harvard University/Grant_Apps/Other_PI/krieger_feb23/working_paper/results_misalignpred_10-09-2022.RData')
## check traceplots for convergence ##
plot(mcmc.out$samples[ , 'beta_dwnom_y'], type = "l", xlab = "iteration")
plot(mcmc.out$samples[ , 'beta_poverty'], type = "l", xlab = "iteration")
## model summary from nimble ##
varsum<-data.frame(mcmc.out$summary)
varsum_y<-varsum[c(grep('_y',rownames(varsum)),which(rownames(varsum)=='beta_poverty')),]
varsum_y<-varsum_y[-which(rownames(varsum_y)=='intercept_y'),]
varsum_y$coef_name<-rownames(varsum_y)
abrm<-varsum_y[,c('Mean','X95.CI_low','X95.CI_upp','coef_name')]
abrm$model<-'ABRM'
names(abrm)<-c('est','lo','hi','coef_name','model')
## read in and format CD-level analysis results ##
load('/Users/rachel/OneDrive - Harvard University/Grant_Apps/Other_PI/krieger_feb23/working_paper/results_cd_level.RData')
cd_model<-data.frame('est'=coef(fit_cd)[-1],confint(fit_cd)[-1,],
'coef_name'=paste0('beta_',c('dwnom_y','popdensity_y','poverty','black_y','aian_y','asian_y','hispanic_y')),
'model'='CD')
names(cd_model)<-c('est','lo','hi','coef_name','model')
## read in and format county-level analysis results ##
load('/Users/rachel/OneDrive - Harvard University/Grant_Apps/Other_PI/krieger_feb23/working_paper/results_county_level.RData')
county_model<-data.frame('est'=coef(county_fit)[-1],confint(county_fit)[-1,],
'coef_name'=paste0('beta_',c('poverty','dwnom_y','popdensity_y','black_y','aian_y','asian_y','hispanic_y')),
'model'='county')
names(county_model)<-c('est','lo','hi','coef_name','model')
## dataframe for results from all models (for ggplot) ##
gg<-rbind(abrm,cd_model,county_model)
## merge in nice names for plot ##
mm<-data.frame('coef_name'=paste0('beta_',c('poverty','popdensity_y','hispanic_y','dwnom_y',
'black_y','asian_y','aian_y')),
'nice_name'=factor(c('Poverty**','Pop Density','%Hispanic','DW-Nominate','%Black','%Asian','%AIAN'),
levels = rev(c('DW-Nominate','Poverty**','Pop Density',
'%Black','%Hispanic','%Asian','%AIAN'))))
hh<-merge(gg,mm,by='coef_name')
ggplot(hh, aes(x=exp(est), y=nice_name)) +
geom_errorbar(aes(xmin=exp(lo), xmax=exp(hi), color=model), position = position_dodge(0.4), width=.3) +
geom_point(aes(color = model), position = position_dodge(0.4), size=1.1)+
geom_vline(xintercept = 1)+
xlab('Mortality Rate Ratio')+
scale_color_manual(values=c("#00AFBB", "#E69F00","#CC79A7"))+
theme_bw()+
theme(text=element_text(size=12,colour="black"),axis.title.y = element_blank(),legend.title= element_blank())
## make a plot of the outcome model coefs and 95% CIs ##
pdf('/Users/rachel/OneDrive - Harvard University/Grant_Apps/Other_PI/krieger_feb23/working_paper/figures/oMod_coefs.pdf',
height=6,width=7)
ggplot(hh, aes(x=exp(est), y=nice_name)) +
geom_errorbar(aes(xmin=exp(lo), xmax=exp(hi), color=model), position = position_dodge(0.4), width=.3) +
geom_point(aes(color = model), position = position_dodge(0.4), size=1.1)+
geom_vline(xintercept = 1)+
xlab('Mortality Rate Ratio')+
scale_color_manual(values=c("#00AFBB", "#E69F00","#CC79A7"))+
theme_bw()+
theme(text=element_text(size=12,colour="black"),axis.title.y = element_blank(),legend.title= element_blank())
dev.off()
hh
exp(c(0.077633507,  0.074719952,  0.080547893))
## make a plot of the outcome model coefs and 95% CIs ##
pdf('/Users/rachel/OneDrive - Harvard University/Grant_Apps/Other_PI/krieger_feb23/working_paper/figures/oMod_coefs.pdf',
height=5,width=7)
ggplot(hh, aes(x=exp(est), y=nice_name)) +
geom_errorbar(aes(xmin=exp(lo), xmax=exp(hi), color=model), position = position_dodge(0.4), width=.3) +
geom_point(aes(color = model), position = position_dodge(0.4), size=1.1)+
geom_vline(xintercept = 1)+
xlab('Mortality Rate Ratio')+
scale_color_manual(values=c("#00AFBB", "#E69F00","#CC79A7"))+
theme_bw()+
theme(text=element_text(size=12,colour="black"),axis.title.y = element_blank(),legend.title= element_blank())
dev.off()
## make a plot of the outcome model coefs and 95% CIs ##
pdf('/Users/rachel/OneDrive - Harvard University/Grant_Apps/Other_PI/krieger_feb23/working_paper/figures/oMod_coefs.pdf',
height=5,width=7)
ggplot(hh, aes(x=exp(est), y=nice_name)) +
geom_errorbar(aes(xmin=exp(lo), xmax=exp(hi), color=model), position = position_dodge(0.4), width=.3) +
geom_point(aes(color = model), position = position_dodge(0.4), size=0.75)+
geom_vline(xintercept = 1)+
xlab('Mortality Rate Ratio')+
scale_color_manual(values=c("#00AFBB", "#E69F00","#CC79A7"))+
theme_bw()+
theme(text=element_text(size=12,colour="black"),axis.title.y = element_blank(),legend.title= element_blank())
dev.off()
## make a plot of the outcome model coefs and 95% CIs ##
pdf('/Users/rachel/OneDrive - Harvard University/Grant_Apps/Other_PI/krieger_feb23/working_paper/figures/oMod_coefs.pdf',
height=6,width=7)
ggplot(hh, aes(x=exp(est), y=nice_name)) +
geom_errorbar(aes(xmin=exp(lo), xmax=exp(hi), color=model), position = position_dodge(0.4), width=.3) +
geom_point(aes(color = model), position = position_dodge(0.4), size=1.1)+
geom_vline(xintercept = 1)+
xlab('Mortality Rate Ratio')+
scale_color_manual(values=c("#00AFBB", "#E69F00","#CC79A7"))+
theme_bw()+
theme(text=element_text(size=12,colour="black"),axis.title.y = element_blank(),legend.title= element_blank())
dev.off()
## make a plot of the outcome model coefs and 95% CIs ##
pdf('/Users/rachel/OneDrive - Harvard University/Grant_Apps/Other_PI/krieger_feb23/working_paper/figures/oMod_coefs.pdf',
height=5.5,width=7)
ggplot(hh, aes(x=exp(est), y=nice_name)) +
geom_errorbar(aes(xmin=exp(lo), xmax=exp(hi), color=model), position = position_dodge(0.4), width=.3) +
geom_point(aes(color = model), position = position_dodge(0.4), size=1.1)+
geom_vline(xintercept = 1)+
xlab('Mortality Rate Ratio')+
scale_color_manual(values=c("#00AFBB", "#E69F00","#CC79A7"))+
theme_bw()+
theme(text=element_text(size=12,colour="black"),axis.title.y = element_blank(),legend.title= element_blank())
dev.off()
